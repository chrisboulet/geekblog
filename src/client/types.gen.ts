// This file is auto-generated by @hey-api/openapi-ts

/**
 * AssemblePayloadBody
 */
export type AssemblePayloadBody = {
    /**
     * Raw Content
     */
    raw_content: string;
};

/**
 * BlogTemplate
 */
export type BlogTemplate = {
    /**
     * Name
     */
    name: string;
    /**
     * Slug
     */
    slug: string;
    /**
     * Description
     */
    description: string;
    /**
     * Icon
     */
    icon: string;
    /**
     * Category
     */
    category: string;
    /**
     * Difficulty
     */
    difficulty: string;
    /**
     * Estimated Duration
     */
    estimated_duration: string;
    /**
     * Target Audience
     */
    target_audience: string;
    /**
     * Tone
     */
    tone: string;
    /**
     * Localization Level
     */
    localization_level?: string;
    /**
     * Is Boulet Style
     */
    is_boulet_style?: boolean;
    /**
     * Template Structure
     */
    template_structure: {
        [key: string]: unknown;
    };
    /**
     * Sample Expressions
     */
    sample_expressions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Additional Metadata
     */
    additional_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * BlogTemplateCreate
 */
export type BlogTemplateCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Slug
     */
    slug: string;
    /**
     * Description
     */
    description: string;
    /**
     * Icon
     */
    icon: string;
    /**
     * Category
     */
    category: string;
    /**
     * Difficulty
     */
    difficulty: string;
    /**
     * Estimated Duration
     */
    estimated_duration: string;
    /**
     * Target Audience
     */
    target_audience: string;
    /**
     * Tone
     */
    tone: string;
    /**
     * Localization Level
     */
    localization_level?: string;
    /**
     * Is Boulet Style
     */
    is_boulet_style?: boolean;
    /**
     * Template Structure
     */
    template_structure: {
        [key: string]: unknown;
    };
    /**
     * Sample Expressions
     */
    sample_expressions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Additional Metadata
     */
    additional_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Is Active
     */
    is_active?: boolean;
};

/**
 * BlogTemplateUpdate
 */
export type BlogTemplateUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Icon
     */
    icon?: string | null;
    /**
     * Category
     */
    category?: string | null;
    /**
     * Difficulty
     */
    difficulty?: string | null;
    /**
     * Estimated Duration
     */
    estimated_duration?: string | null;
    /**
     * Target Audience
     */
    target_audience?: string | null;
    /**
     * Tone
     */
    tone?: string | null;
    /**
     * Localization Level
     */
    localization_level?: string;
    /**
     * Is Boulet Style
     */
    is_boulet_style?: boolean;
    /**
     * Template Structure
     */
    template_structure?: {
        [key: string]: unknown;
    } | null;
    /**
     * Sample Expressions
     */
    sample_expressions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Additional Metadata
     */
    additional_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
};

/**
 * Body_run_agent_on_task_api_v1_tasks__task_id__run_agent_post
 */
export type BodyRunAgentOnTaskApiV1TasksTaskIdRunAgentPost = {
    /**
     * Agent Type
     * Type d'agent à exécuter ('researcher' ou 'writer').
     */
    agent_type: 'researcher' | 'writer';
    /**
     * Context
     * Contexte supplémentaire pour l'agent (par exemple, résultats d'une recherche précédente pour l'agent rédacteur). Si non fourni, la description actuelle de la tâche peut être utilisée comme contexte initial.
     */
    context?: string | null;
};

/**
 * Body_run_agent_on_task_async_api_v1_tasks__task_id__run_agent_async_post
 */
export type BodyRunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPost = {
    /**
     * Agent Type
     * Type d'agent à exécuter ('researcher' ou 'writer').
     */
    agent_type: 'researcher' | 'writer';
    /**
     * Context
     * Contexte supplémentaire pour l'agent.
     */
    context?: string | null;
};

/**
 * DuplicateProjectRequest
 */
export type DuplicateProjectRequest = {
    /**
     * New Name
     */
    new_name?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * JobStatus
 * Statut d'un job asynchrone avec tracking enrichi
 */
export type JobStatus = {
    /**
     * Job Id
     */
    job_id: string;
    /**
     * Status
     */
    status: string;
    /**
     * Job Type
     */
    job_type?: string | null;
    /**
     * Progress
     */
    progress?: number;
    /**
     * Step
     */
    step?: string | null;
    /**
     * Status Message
     */
    status_message?: string | null;
    /**
     * Error
     */
    error?: string | null;
    /**
     * Result
     */
    result?: unknown | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Estimated Duration
     */
    estimated_duration?: number | null;
    /**
     * Progress History
     */
    progress_history?: Array<ProgressStep> | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * ProgressStep
 * Étape de progression avec timestamp
 */
export type ProgressStep = {
    /**
     * Step
     */
    step: string;
    /**
     * Progress
     */
    progress: number;
    /**
     * Timestamp
     */
    timestamp: string;
    /**
     * Message
     */
    message?: string | null;
};

/**
 * Project
 */
export type Project = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Planning Status
     */
    planning_status?: string;
    /**
     * Planning Job Id
     */
    planning_job_id?: string | null;
    /**
     * Tasks
     */
    tasks?: Array<Task>;
};

/**
 * ProjectArchive
 * Schéma pour archivage de projet
 */
export type ProjectArchive = {
    /**
     * Reason
     */
    reason?: string | null;
};

/**
 * ProjectCreate
 */
export type ProjectCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * ProjectFromTemplate
 * Création de projet depuis un template
 */
export type ProjectFromTemplate = {
    /**
     * Template Id
     */
    template_id: number;
    customization: TemplateCustomization;
};

/**
 * ProjectSettings
 */
export type ProjectSettings = {
    /**
     * Auto Archive Days
     */
    auto_archive_days?: number | null;
    /**
     * Ai Model Preference
     */
    ai_model_preference?: string | null;
    /**
     * Notification Enabled
     */
    notification_enabled?: boolean | null;
    /**
     * Custom Prompts
     */
    custom_prompts?: {
        [key: string]: string;
    } | null;
    /**
     * Project Id
     */
    project_id: number;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * ProjectSettingsUpdate
 */
export type ProjectSettingsUpdate = {
    /**
     * Auto Archive Days
     */
    auto_archive_days?: number | null;
    /**
     * Ai Model Preference
     */
    ai_model_preference?: string | null;
    /**
     * Notification Enabled
     */
    notification_enabled?: boolean | null;
    /**
     * Custom Prompts
     */
    custom_prompts?: {
        [key: string]: string;
    } | null;
};

/**
 * ProjectUpdate
 */
export type ProjectUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Tags
     */
    tags?: string | null;
    /**
     * Planning Status
     */
    planning_status?: string | null;
    /**
     * Planning Job Id
     */
    planning_job_id?: string | null;
};

/**
 * ProjectWithExtensions
 * Project avec toutes les extensions
 */
export type ProjectWithExtensions = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Archived
     */
    archived?: boolean;
    /**
     * Archived At
     */
    archived_at?: string | null;
    /**
     * Settings
     */
    settings?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tags
     */
    tags?: string | null;
    /**
     * Planning Status
     */
    planning_status?: string;
    /**
     * Planning Job Id
     */
    planning_job_id?: string | null;
    /**
     * Tasks
     */
    tasks?: Array<Task>;
};

/**
 * Task
 */
export type Task = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Order
     */
    order?: number | null;
    /**
     * Id
     */
    id: number;
    /**
     * Project Id
     */
    project_id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Created By Ai
     */
    created_by_ai?: boolean;
    /**
     * Last Updated By Ai At
     */
    last_updated_by_ai_at?: string | null;
};

/**
 * TaskCreate
 */
export type TaskCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Order
     */
    order?: number | null;
    /**
     * Project Id
     */
    project_id: number;
};

/**
 * TaskOutputSummary
 * Résumé d'un output de tâche
 */
export type TaskOutputSummary = {
    /**
     * Id
     */
    id: string;
    /**
     * Task Id
     */
    task_id: number;
    /**
     * Task Title
     */
    task_title?: string | null;
    output_type: TaskOutputTypeEnum;
    /**
     * Content Preview
     */
    content_preview: string;
    /**
     * Word Count
     */
    word_count?: number | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * TaskOutputTypeEnum
 */
export type TaskOutputTypeEnum = 'research' | 'writing' | 'planning' | 'assembly' | 'finishing';

/**
 * TaskUpdate
 */
export type TaskUpdate = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Order
     */
    order?: number | null;
    /**
     * Project Id
     */
    project_id?: number | null;
    /**
     * Created By Ai
     */
    created_by_ai?: boolean | null;
    /**
     * Last Updated By Ai At
     */
    last_updated_by_ai_at?: string | null;
};

/**
 * TemplateCustomization
 * Options de personnalisation pour un template
 */
export type TemplateCustomization = {
    /**
     * Title
     */
    title: string;
    /**
     * Theme
     */
    theme: string;
    /**
     * Localization Level
     */
    localization_level?: 'bas' | 'moyen' | 'élevé';
    /**
     * Audience
     */
    audience?: 'québécois' | 'francophone' | 'international';
    /**
     * Additional Instructions
     */
    additional_instructions?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * WorkflowExecutionCreate
 * Création d'un nouveau workflow
 */
export type WorkflowExecutionCreate = {
    /**
     * Project Id
     */
    project_id: number;
    workflow_type?: WorkflowTypeEnum;
    /**
     * Options
     */
    options?: {
        [key: string]: unknown;
    } | null;
};

/**
 * WorkflowExecutionStatus
 * Statut détaillé d'un workflow
 */
export type WorkflowExecutionStatus = {
    /**
     * Id
     */
    id: string;
    /**
     * Project Id
     */
    project_id: number;
    workflow_type: WorkflowTypeEnum;
    status: WorkflowStatusEnum;
    current_step?: WorkflowStep | null;
    /**
     * Total Steps
     */
    total_steps?: number;
    /**
     * Progress Percentage
     */
    progress_percentage: number;
    /**
     * Started At
     */
    started_at: string;
    /**
     * Completed At
     */
    completed_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Error Details
     */
    error_details?: {
        [key: string]: unknown;
    } | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Total Jobs
     */
    total_jobs?: number | null;
    /**
     * Completed Jobs
     */
    completed_jobs?: number | null;
    /**
     * Failed Jobs
     */
    failed_jobs?: number | null;
};

/**
 * WorkflowLaunchResponse
 * Réponse au lancement d'un workflow
 */
export type WorkflowLaunchResponse = {
    /**
     * Workflow Execution Id
     */
    workflow_execution_id: string;
    /**
     * Primary Job Id
     */
    primary_job_id: string;
    /**
     * Estimated Duration
     * Durée estimée en secondes
     */
    estimated_duration?: number | null;
    /**
     * Message
     */
    message?: string;
};

/**
 * WorkflowOutputsResponse
 * Réponse contenant les outputs d'un workflow
 */
export type WorkflowOutputsResponse = {
    /**
     * Workflow Id
     */
    workflow_id: string;
    /**
     * Outputs
     */
    outputs: Array<TaskOutputSummary>;
    /**
     * Total Outputs
     */
    total_outputs: number;
    /**
     * Total Words
     */
    total_words: number;
    /**
     * Outputs By Type
     */
    outputs_by_type: {
        [key: string]: number;
    };
};

/**
 * WorkflowStatusEnum
 */
export type WorkflowStatusEnum = 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';

/**
 * WorkflowStep
 * Étape courante d'un workflow
 */
export type WorkflowStep = {
    /**
     * Step Name
     */
    step_name: string;
    /**
     * Progress
     */
    progress: number;
    /**
     * Timestamp
     */
    timestamp?: string | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * WorkflowTypeEnum
 */
export type WorkflowTypeEnum = 'full_article' | 'research_only' | 'writing_only' | 'custom';

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckApiV1HealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health';
};

export type HealthCheckApiV1HealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DetailedHealthCheckApiV1HealthDetailedGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health/detailed';
};

export type DetailedHealthCheckApiV1HealthDetailedGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LivenessProbeApiV1HealthLiveGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health/live';
};

export type LivenessProbeApiV1HealthLiveGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadinessProbeApiV1HealthReadyGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health/ready';
};

export type ReadinessProbeApiV1HealthReadyGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadProjectsEndpointApiV1ProjectsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/projects/';
};

export type ReadProjectsEndpointApiV1ProjectsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadProjectsEndpointApiV1ProjectsGetError = ReadProjectsEndpointApiV1ProjectsGetErrors[keyof ReadProjectsEndpointApiV1ProjectsGetErrors];

export type ReadProjectsEndpointApiV1ProjectsGetResponses = {
    /**
     * Response Read Projects Endpoint Api V1 Projects  Get
     * Successful Response
     */
    200: Array<Project>;
};

export type ReadProjectsEndpointApiV1ProjectsGetResponse = ReadProjectsEndpointApiV1ProjectsGetResponses[keyof ReadProjectsEndpointApiV1ProjectsGetResponses];

export type CreateProjectEndpointApiV1ProjectsPostData = {
    body: ProjectCreate;
    path?: never;
    query?: never;
    url: '/api/v1/projects/';
};

export type CreateProjectEndpointApiV1ProjectsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProjectEndpointApiV1ProjectsPostError = CreateProjectEndpointApiV1ProjectsPostErrors[keyof CreateProjectEndpointApiV1ProjectsPostErrors];

export type CreateProjectEndpointApiV1ProjectsPostResponses = {
    /**
     * Successful Response
     */
    201: Project;
};

export type CreateProjectEndpointApiV1ProjectsPostResponse = CreateProjectEndpointApiV1ProjectsPostResponses[keyof CreateProjectEndpointApiV1ProjectsPostResponses];

export type DeleteProjectEndpointApiV1ProjectsProjectIdDeleteData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}';
};

export type DeleteProjectEndpointApiV1ProjectsProjectIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProjectEndpointApiV1ProjectsProjectIdDeleteError = DeleteProjectEndpointApiV1ProjectsProjectIdDeleteErrors[keyof DeleteProjectEndpointApiV1ProjectsProjectIdDeleteErrors];

export type DeleteProjectEndpointApiV1ProjectsProjectIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadProjectEndpointApiV1ProjectsProjectIdGetData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}';
};

export type ReadProjectEndpointApiV1ProjectsProjectIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadProjectEndpointApiV1ProjectsProjectIdGetError = ReadProjectEndpointApiV1ProjectsProjectIdGetErrors[keyof ReadProjectEndpointApiV1ProjectsProjectIdGetErrors];

export type ReadProjectEndpointApiV1ProjectsProjectIdGetResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type ReadProjectEndpointApiV1ProjectsProjectIdGetResponse = ReadProjectEndpointApiV1ProjectsProjectIdGetResponses[keyof ReadProjectEndpointApiV1ProjectsProjectIdGetResponses];

export type UpdateProjectEndpointApiV1ProjectsProjectIdPutData = {
    body: ProjectUpdate;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}';
};

export type UpdateProjectEndpointApiV1ProjectsProjectIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProjectEndpointApiV1ProjectsProjectIdPutError = UpdateProjectEndpointApiV1ProjectsProjectIdPutErrors[keyof UpdateProjectEndpointApiV1ProjectsProjectIdPutErrors];

export type UpdateProjectEndpointApiV1ProjectsProjectIdPutResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type UpdateProjectEndpointApiV1ProjectsProjectIdPutResponse = UpdateProjectEndpointApiV1ProjectsProjectIdPutResponses[keyof UpdateProjectEndpointApiV1ProjectsProjectIdPutResponses];

export type PlanProjectWithAiApiV1ProjectsProjectIdPlanPostData = {
    /**
     * Project Goal
     * Objectif détaillé du projet pour guider la planification IA. Si non fourni, la description du projet sera utilisée.
     */
    body?: string | null;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/plan';
};

export type PlanProjectWithAiApiV1ProjectsProjectIdPlanPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PlanProjectWithAiApiV1ProjectsProjectIdPlanPostError = PlanProjectWithAiApiV1ProjectsProjectIdPlanPostErrors[keyof PlanProjectWithAiApiV1ProjectsProjectIdPlanPostErrors];

export type PlanProjectWithAiApiV1ProjectsProjectIdPlanPostResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type PlanProjectWithAiApiV1ProjectsProjectIdPlanPostResponse = PlanProjectWithAiApiV1ProjectsProjectIdPlanPostResponses[keyof PlanProjectWithAiApiV1ProjectsProjectIdPlanPostResponses];

export type PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostData = {
    /**
     * Project Goal
     * Objectif détaillé du projet pour guider la planification IA. Si non fourni, la description du projet sera utilisée.
     */
    body?: string | null;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/plan-async';
};

export type PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostError = PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostErrors[keyof PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostErrors];

export type PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostResponses = {
    /**
     * Successful Response
     */
    200: JobStatus;
};

export type PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostResponse = PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostResponses[keyof PlanProjectAsyncApiV1ProjectsProjectIdPlanAsyncPostResponses];

export type AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostData = {
    body: AssemblePayloadBody;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/assemble';
};

export type AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostError = AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostErrors[keyof AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostErrors];

export type AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostResponses = {
    /**
     * Response Assemble And Refine Project Content Api V1 Projects  Project Id  Assemble Post
     * Successful Response
     */
    200: string;
};

export type AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostResponse = AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostResponses[keyof AssembleAndRefineProjectContentApiV1ProjectsProjectIdAssemblePostResponses];

export type AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostData = {
    body: AssemblePayloadBody;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/assemble-async';
};

export type AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostError = AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostErrors[keyof AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostErrors];

export type AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostResponses = {
    /**
     * Successful Response
     */
    200: JobStatus;
};

export type AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostResponse = AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostResponses[keyof AssembleAndRefineProjectContentAsyncApiV1ProjectsProjectIdAssembleAsyncPostResponses];

export type LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostData = {
    body: WorkflowExecutionCreate;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/workflows/generate-article';
};

export type LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostError = LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostErrors[keyof LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostErrors];

export type LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostResponses = {
    /**
     * Successful Response
     */
    200: WorkflowLaunchResponse;
};

export type LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostResponse = LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostResponses[keyof LaunchArticleWorkflowApiV1ProjectsProjectIdWorkflowsGenerateArticlePostResponses];

export type GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetData = {
    body?: never;
    path: {
        /**
         * Workflow Id
         */
        workflow_id: string;
    };
    query?: never;
    url: '/api/v1/projects/workflows/{workflow_id}/status';
};

export type GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetError = GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetErrors[keyof GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetErrors];

export type GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: WorkflowExecutionStatus;
};

export type GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetResponse = GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetResponses[keyof GetWorkflowStatusApiV1ProjectsWorkflowsWorkflowIdStatusGetResponses];

export type GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetData = {
    body?: never;
    path: {
        /**
         * Workflow Id
         */
        workflow_id: string;
    };
    query?: never;
    url: '/api/v1/projects/workflows/{workflow_id}/outputs';
};

export type GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetError = GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetErrors[keyof GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetErrors];

export type GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetResponses = {
    /**
     * Successful Response
     */
    200: WorkflowOutputsResponse;
};

export type GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetResponse = GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetResponses[keyof GetWorkflowOutputsApiV1ProjectsWorkflowsWorkflowIdOutputsGetResponses];

export type ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostData = {
    body: ProjectArchive;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/archive';
};

export type ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostError = ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostErrors[keyof ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostErrors];

export type ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostResponses = {
    /**
     * Successful Response
     */
    200: ProjectWithExtensions;
};

export type ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostResponse = ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostResponses[keyof ArchiveProjectEndpointApiV1ProjectsProjectIdArchivePostResponses];

export type UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/unarchive';
};

export type UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostError = UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostErrors[keyof UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostErrors];

export type UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostResponses = {
    /**
     * Successful Response
     */
    200: ProjectWithExtensions;
};

export type UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostResponse = UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostResponses[keyof UnarchiveProjectEndpointApiV1ProjectsProjectIdUnarchivePostResponses];

export type GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/settings';
};

export type GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetError = GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetErrors[keyof GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetErrors];

export type GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetResponses = {
    /**
     * Successful Response
     */
    200: ProjectSettings;
};

export type GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetResponse = GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetResponses[keyof GetProjectSettingsEndpointApiV1ProjectsProjectIdSettingsGetResponses];

export type UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutData = {
    body: ProjectSettingsUpdate;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/settings';
};

export type UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutError = UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutErrors[keyof UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutErrors];

export type UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutResponses = {
    /**
     * Successful Response
     */
    200: ProjectWithExtensions;
};

export type UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutResponse = UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutResponses[keyof UpdateProjectSettingsEndpointApiV1ProjectsProjectIdSettingsPutResponses];

export type DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostData = {
    body: DuplicateProjectRequest;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/duplicate';
};

export type DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostError = DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostErrors[keyof DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostErrors];

export type DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostResponses = {
    /**
     * Successful Response
     */
    200: ProjectWithExtensions;
};

export type DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostResponse = DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostResponses[keyof DuplicateProjectEndpointApiV1ProjectsProjectIdDuplicatePostResponses];

export type GetFilteredProjectsEndpointApiV1ProjectsFilteredGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         * Nombre de projets à ignorer
         */
        skip?: number;
        /**
         * Limit
         * Limite de projets à retourner
         */
        limit?: number;
        /**
         * Include Archived
         * Inclure les projets archivés
         */
        include_archived?: boolean;
        /**
         * Tags
         * Filtrer par tags (CSV)
         */
        tags?: string | null;
    };
    url: '/api/v1/projects/filtered';
};

export type GetFilteredProjectsEndpointApiV1ProjectsFilteredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFilteredProjectsEndpointApiV1ProjectsFilteredGetError = GetFilteredProjectsEndpointApiV1ProjectsFilteredGetErrors[keyof GetFilteredProjectsEndpointApiV1ProjectsFilteredGetErrors];

export type GetFilteredProjectsEndpointApiV1ProjectsFilteredGetResponses = {
    /**
     * Response Get Filtered Projects Endpoint Api V1 Projects Filtered Get
     * Successful Response
     */
    200: Array<ProjectWithExtensions>;
};

export type GetFilteredProjectsEndpointApiV1ProjectsFilteredGetResponse = GetFilteredProjectsEndpointApiV1ProjectsFilteredGetResponses[keyof GetFilteredProjectsEndpointApiV1ProjectsFilteredGetResponses];

export type GetAllProjectTagsEndpointApiV1ProjectsTagsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/projects/tags';
};

export type GetAllProjectTagsEndpointApiV1ProjectsTagsGetResponses = {
    /**
     * Response Get All Project Tags Endpoint Api V1 Projects Tags Get
     * Successful Response
     */
    200: Array<string>;
};

export type GetAllProjectTagsEndpointApiV1ProjectsTagsGetResponse = GetAllProjectTagsEndpointApiV1ProjectsTagsGetResponses[keyof GetAllProjectTagsEndpointApiV1ProjectsTagsGetResponses];

export type UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutData = {
    /**
     * Tags
     * Liste des tags à assigner
     */
    body: Array<string>;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/tags';
};

export type UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutError = UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutErrors[keyof UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutErrors];

export type UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutResponses = {
    /**
     * Successful Response
     */
    200: ProjectWithExtensions;
};

export type UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutResponse = UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutResponses[keyof UpdateProjectTagsEndpointApiV1ProjectsProjectIdTagsPutResponses];

export type CreateTaskEndpointApiV1TasksPostData = {
    body: TaskCreate;
    path?: never;
    query?: never;
    url: '/api/v1/tasks/';
};

export type CreateTaskEndpointApiV1TasksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTaskEndpointApiV1TasksPostError = CreateTaskEndpointApiV1TasksPostErrors[keyof CreateTaskEndpointApiV1TasksPostErrors];

export type CreateTaskEndpointApiV1TasksPostResponses = {
    /**
     * Successful Response
     */
    201: Task;
};

export type CreateTaskEndpointApiV1TasksPostResponse = CreateTaskEndpointApiV1TasksPostResponses[keyof CreateTaskEndpointApiV1TasksPostResponses];

export type DeleteTaskEndpointApiV1TasksTaskIdDeleteData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/api/v1/tasks/{task_id}';
};

export type DeleteTaskEndpointApiV1TasksTaskIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTaskEndpointApiV1TasksTaskIdDeleteError = DeleteTaskEndpointApiV1TasksTaskIdDeleteErrors[keyof DeleteTaskEndpointApiV1TasksTaskIdDeleteErrors];

export type DeleteTaskEndpointApiV1TasksTaskIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Task;
};

export type DeleteTaskEndpointApiV1TasksTaskIdDeleteResponse = DeleteTaskEndpointApiV1TasksTaskIdDeleteResponses[keyof DeleteTaskEndpointApiV1TasksTaskIdDeleteResponses];

export type ReadTaskEndpointApiV1TasksTaskIdGetData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/api/v1/tasks/{task_id}';
};

export type ReadTaskEndpointApiV1TasksTaskIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadTaskEndpointApiV1TasksTaskIdGetError = ReadTaskEndpointApiV1TasksTaskIdGetErrors[keyof ReadTaskEndpointApiV1TasksTaskIdGetErrors];

export type ReadTaskEndpointApiV1TasksTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: Task;
};

export type ReadTaskEndpointApiV1TasksTaskIdGetResponse = ReadTaskEndpointApiV1TasksTaskIdGetResponses[keyof ReadTaskEndpointApiV1TasksTaskIdGetResponses];

export type UpdateTaskEndpointApiV1TasksTaskIdPutData = {
    body: TaskUpdate;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/api/v1/tasks/{task_id}';
};

export type UpdateTaskEndpointApiV1TasksTaskIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTaskEndpointApiV1TasksTaskIdPutError = UpdateTaskEndpointApiV1TasksTaskIdPutErrors[keyof UpdateTaskEndpointApiV1TasksTaskIdPutErrors];

export type UpdateTaskEndpointApiV1TasksTaskIdPutResponses = {
    /**
     * Successful Response
     */
    200: Task;
};

export type UpdateTaskEndpointApiV1TasksTaskIdPutResponse = UpdateTaskEndpointApiV1TasksTaskIdPutResponses[keyof UpdateTaskEndpointApiV1TasksTaskIdPutResponses];

export type RunAgentOnTaskApiV1TasksTaskIdRunAgentPostData = {
    body: BodyRunAgentOnTaskApiV1TasksTaskIdRunAgentPost;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/api/v1/tasks/{task_id}/run-agent';
};

export type RunAgentOnTaskApiV1TasksTaskIdRunAgentPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunAgentOnTaskApiV1TasksTaskIdRunAgentPostError = RunAgentOnTaskApiV1TasksTaskIdRunAgentPostErrors[keyof RunAgentOnTaskApiV1TasksTaskIdRunAgentPostErrors];

export type RunAgentOnTaskApiV1TasksTaskIdRunAgentPostResponses = {
    /**
     * Successful Response
     */
    200: Task;
};

export type RunAgentOnTaskApiV1TasksTaskIdRunAgentPostResponse = RunAgentOnTaskApiV1TasksTaskIdRunAgentPostResponses[keyof RunAgentOnTaskApiV1TasksTaskIdRunAgentPostResponses];

export type RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostData = {
    body: BodyRunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPost;
    path: {
        /**
         * Task Id
         */
        task_id: number;
    };
    query?: never;
    url: '/api/v1/tasks/{task_id}/run-agent-async';
};

export type RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostError = RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostErrors[keyof RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostErrors];

export type RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostResponses = {
    /**
     * Successful Response
     */
    200: JobStatus;
};

export type RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostResponse = RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostResponses[keyof RunAgentOnTaskAsyncApiV1TasksTaskIdRunAgentAsyncPostResponses];

export type GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetData = {
    body?: never;
    path: {
        /**
         * Project Id
         */
        project_id: number;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/tasks/project/{project_id}';
};

export type GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetError = GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetErrors[keyof GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetErrors];

export type GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetResponses = {
    /**
     * Response Get Tasks For Project Endpoint Api V1 Tasks Project  Project Id  Get
     * Successful Response
     */
    200: Array<Task>;
};

export type GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetResponse = GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetResponses[keyof GetTasksForProjectEndpointApiV1TasksProjectProjectIdGetResponses];

export type GetJobStatusApiV1JobsJobIdStatusGetData = {
    body?: never;
    path: {
        /**
         * Job Id
         */
        job_id: string;
    };
    query?: never;
    url: '/api/v1/jobs/{job_id}/status';
};

export type GetJobStatusApiV1JobsJobIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetJobStatusApiV1JobsJobIdStatusGetError = GetJobStatusApiV1JobsJobIdStatusGetErrors[keyof GetJobStatusApiV1JobsJobIdStatusGetErrors];

export type GetJobStatusApiV1JobsJobIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: JobStatus;
};

export type GetJobStatusApiV1JobsJobIdStatusGetResponse = GetJobStatusApiV1JobsJobIdStatusGetResponses[keyof GetJobStatusApiV1JobsJobIdStatusGetResponses];

export type GetJobResultApiV1JobsJobIdResultGetData = {
    body?: never;
    path: {
        /**
         * Job Id
         */
        job_id: string;
    };
    query?: never;
    url: '/api/v1/jobs/{job_id}/result';
};

export type GetJobResultApiV1JobsJobIdResultGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetJobResultApiV1JobsJobIdResultGetError = GetJobResultApiV1JobsJobIdResultGetErrors[keyof GetJobResultApiV1JobsJobIdResultGetErrors];

export type GetJobResultApiV1JobsJobIdResultGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelJobApiV1JobsJobIdDeleteData = {
    body?: never;
    path: {
        /**
         * Job Id
         */
        job_id: string;
    };
    query?: never;
    url: '/api/v1/jobs/{job_id}';
};

export type CancelJobApiV1JobsJobIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelJobApiV1JobsJobIdDeleteError = CancelJobApiV1JobsJobIdDeleteErrors[keyof CancelJobApiV1JobsJobIdDeleteErrors];

export type CancelJobApiV1JobsJobIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BatchJobStatusApiV1JobsStatusPostData = {
    /**
     * Job Ids
     */
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/v1/jobs/status';
};

export type BatchJobStatusApiV1JobsStatusPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BatchJobStatusApiV1JobsStatusPostError = BatchJobStatusApiV1JobsStatusPostErrors[keyof BatchJobStatusApiV1JobsStatusPostErrors];

export type BatchJobStatusApiV1JobsStatusPostResponses = {
    /**
     * Response Batch Job Status Api V1 Jobs Status Post
     * Successful Response
     */
    200: Array<JobStatus>;
};

export type BatchJobStatusApiV1JobsStatusPostResponse = BatchJobStatusApiV1JobsStatusPostResponses[keyof BatchJobStatusApiV1JobsStatusPostResponses];

export type ListJobsApiV1JobsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Project Id
         */
        project_id?: number;
        /**
         * Status
         */
        status?: string;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/jobs/';
};

export type ListJobsApiV1JobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListJobsApiV1JobsGetError = ListJobsApiV1JobsGetErrors[keyof ListJobsApiV1JobsGetErrors];

export type ListJobsApiV1JobsGetResponses = {
    /**
     * Response List Jobs Api V1 Jobs  Get
     * Successful Response
     */
    200: Array<JobStatus>;
};

export type ListJobsApiV1JobsGetResponse = ListJobsApiV1JobsGetResponses[keyof ListJobsApiV1JobsGetResponses];

export type CreateTestJobApiV1JobsTestPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/jobs/test';
};

export type CreateTestJobApiV1JobsTestPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTemplatesApiV1TemplatesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Category
         * Filtrer par catégorie
         */
        category?: string | null;
        /**
         * Difficulty
         * Filtrer par difficulté
         */
        difficulty?: string | null;
        /**
         * Tone
         * Filtrer par ton
         */
        tone?: string | null;
        /**
         * Active Only
         * Seuls les templates actifs
         */
        active_only?: boolean;
    };
    url: '/api/v1/templates/';
};

export type GetTemplatesApiV1TemplatesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTemplatesApiV1TemplatesGetError = GetTemplatesApiV1TemplatesGetErrors[keyof GetTemplatesApiV1TemplatesGetErrors];

export type GetTemplatesApiV1TemplatesGetResponses = {
    /**
     * Response Get Templates Api V1 Templates  Get
     * Successful Response
     */
    200: Array<BlogTemplate>;
};

export type GetTemplatesApiV1TemplatesGetResponse = GetTemplatesApiV1TemplatesGetResponses[keyof GetTemplatesApiV1TemplatesGetResponses];

export type CreateTemplateApiV1TemplatesPostData = {
    body: BlogTemplateCreate;
    path?: never;
    query?: never;
    url: '/api/v1/templates/';
};

export type CreateTemplateApiV1TemplatesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTemplateApiV1TemplatesPostError = CreateTemplateApiV1TemplatesPostErrors[keyof CreateTemplateApiV1TemplatesPostErrors];

export type CreateTemplateApiV1TemplatesPostResponses = {
    /**
     * Successful Response
     */
    200: BlogTemplate;
};

export type CreateTemplateApiV1TemplatesPostResponse = CreateTemplateApiV1TemplatesPostResponses[keyof CreateTemplateApiV1TemplatesPostResponses];

export type GetTemplateCategoriesApiV1TemplatesCategoriesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/templates/categories';
};

export type GetTemplateCategoriesApiV1TemplatesCategoriesGetResponses = {
    /**
     * Response Get Template Categories Api V1 Templates Categories Get
     * Successful Response
     */
    200: Array<string>;
};

export type GetTemplateCategoriesApiV1TemplatesCategoriesGetResponse = GetTemplateCategoriesApiV1TemplatesCategoriesGetResponses[keyof GetTemplateCategoriesApiV1TemplatesCategoriesGetResponses];

export type GetTemplateStatsApiV1TemplatesStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/templates/stats';
};

export type GetTemplateStatsApiV1TemplatesStatsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeactivateTemplateApiV1TemplatesTemplateIdDeleteData = {
    body?: never;
    path: {
        /**
         * Template Id
         */
        template_id: number;
    };
    query?: never;
    url: '/api/v1/templates/{template_id}';
};

export type DeactivateTemplateApiV1TemplatesTemplateIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeactivateTemplateApiV1TemplatesTemplateIdDeleteError = DeactivateTemplateApiV1TemplatesTemplateIdDeleteErrors[keyof DeactivateTemplateApiV1TemplatesTemplateIdDeleteErrors];

export type DeactivateTemplateApiV1TemplatesTemplateIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTemplateApiV1TemplatesTemplateIdGetData = {
    body?: never;
    path: {
        /**
         * Template Id
         */
        template_id: number;
    };
    query?: never;
    url: '/api/v1/templates/{template_id}';
};

export type GetTemplateApiV1TemplatesTemplateIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTemplateApiV1TemplatesTemplateIdGetError = GetTemplateApiV1TemplatesTemplateIdGetErrors[keyof GetTemplateApiV1TemplatesTemplateIdGetErrors];

export type GetTemplateApiV1TemplatesTemplateIdGetResponses = {
    /**
     * Successful Response
     */
    200: BlogTemplate;
};

export type GetTemplateApiV1TemplatesTemplateIdGetResponse = GetTemplateApiV1TemplatesTemplateIdGetResponses[keyof GetTemplateApiV1TemplatesTemplateIdGetResponses];

export type UpdateTemplateApiV1TemplatesTemplateIdPutData = {
    body: BlogTemplateUpdate;
    path: {
        /**
         * Template Id
         */
        template_id: number;
    };
    query?: never;
    url: '/api/v1/templates/{template_id}';
};

export type UpdateTemplateApiV1TemplatesTemplateIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTemplateApiV1TemplatesTemplateIdPutError = UpdateTemplateApiV1TemplatesTemplateIdPutErrors[keyof UpdateTemplateApiV1TemplatesTemplateIdPutErrors];

export type UpdateTemplateApiV1TemplatesTemplateIdPutResponses = {
    /**
     * Successful Response
     */
    200: BlogTemplate;
};

export type UpdateTemplateApiV1TemplatesTemplateIdPutResponse = UpdateTemplateApiV1TemplatesTemplateIdPutResponses[keyof UpdateTemplateApiV1TemplatesTemplateIdPutResponses];

export type GetTemplateBySlugApiV1TemplatesSlugSlugGetData = {
    body?: never;
    path: {
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/templates/slug/{slug}';
};

export type GetTemplateBySlugApiV1TemplatesSlugSlugGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTemplateBySlugApiV1TemplatesSlugSlugGetError = GetTemplateBySlugApiV1TemplatesSlugSlugGetErrors[keyof GetTemplateBySlugApiV1TemplatesSlugSlugGetErrors];

export type GetTemplateBySlugApiV1TemplatesSlugSlugGetResponses = {
    /**
     * Successful Response
     */
    200: BlogTemplate;
};

export type GetTemplateBySlugApiV1TemplatesSlugSlugGetResponse = GetTemplateBySlugApiV1TemplatesSlugSlugGetResponses[keyof GetTemplateBySlugApiV1TemplatesSlugSlugGetResponses];

export type PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostData = {
    body: ProjectFromTemplate;
    path?: never;
    query?: never;
    url: '/api/v1/templates/preview-tasks';
};

export type PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostError = PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostErrors[keyof PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostErrors];

export type PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostResponses = {
    /**
     * Response Preview Template Tasks Endpoint Api V1 Templates Preview Tasks Post
     * Successful Response
     */
    200: Array<{
        [key: string]: string;
    }>;
};

export type PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostResponse = PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostResponses[keyof PreviewTemplateTasksEndpointApiV1TemplatesPreviewTasksPostResponses];

export type CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostData = {
    body: ProjectFromTemplate;
    path?: never;
    query?: never;
    url: '/api/v1/templates/projects/from-template';
};

export type CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostError = CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostErrors[keyof CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostErrors];

export type CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostResponse = CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostResponses[keyof CreateProjectFromTemplateApiV1TemplatesProjectsFromTemplatePostResponses];

export type ReadRootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};
